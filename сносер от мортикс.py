import logging
import smtplib
import socket
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7781461583:AAF5GBghbRH3YnIbBCNWktM011SjDuTkAeQ"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ê–∫–∫–∞—É–Ω—Ç—ã Gmail (App Passwords)
senders = {
    'zlotema12@gmail.com': 'xxie yzkz wdyk ugxm',
    'maybelox231@gmail.com': 'auov fern blju utwf',
    'andeybirum@gmail.com': 'ouho uujv htlm rwaz',
    'faverokstandof@gmail.com': 'nrsg kchi etta uuzh',
    'faveroktt@gmail.com': 'dywo rgle jjwl hhbq',
    'mksmksergeev@gmail.com': 'ycmw rqii rcbd isfd',
    'maksimafanacefish@gmail.com': 'hdpn tbfp acwv jyro'
}

# –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –∂–∞–ª–æ–±
receivers = ['sms@telegram.org', 'dmca@telegram.org', 'abuse@telegram.org']

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ComplaintState(StatesGroup):
    complaint_type = State()
    username = State()
    telegram_id = State()
    reason = State()
    count = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("/complaint"), KeyboardButton("‚Ñπ –û –ø—Ä–æ–µ–∫—Ç–µ"))

# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("üöÄ –ë–æ—Ç –¥–ª—è –∂–∞–ª–æ–± –≤ Telegram. –ò—Å–ø–æ–ª—å–∑—É–π /complaint", reply_markup=keyboard)

@dp.message_handler(commands=["complaint"])
async def complaint(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìå –ß–µ—Ä–µ–∑ —á–∞—Ç", "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å–Ω–æ—Å")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∞–ª–æ–±—ã:", reply_markup=markup)
    await ComplaintState.complaint_type.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=ComplaintState.complaint_type)
async def process_type(message: types.Message, state: FSMContext):
    if message.text not in ["üìå –ß–µ—Ä–µ–∑ —á–∞—Ç", "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å–Ω–æ—Å"]:
        return await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!")
    await state.update_data(complaint_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è (–±–µ–∑ @):")
    await ComplaintState.username.set()

@dp.message_handler(state=ComplaintState.username)
async def process_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID:")
    await ComplaintState.telegram_id.set()

@dp.message_handler(state=ComplaintState.telegram_id)
async def process_id(message: types.Message, state: FSMContext):
    await state.update_data(telegram_id=message.text.strip())
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:")
    await ComplaintState.reason.set()

@dp.message_handler(state=ComplaintState.reason)
async def process_reason(message: types.Message, state: FSMContext):
    await state.update_data(reason=message.text.strip())
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    await ComplaintState.count.set()

@dp.message_handler(state=ComplaintState.count)
async def process_count(message: types.Message, state: FSMContext):
    try:
        count = int(message.text)
        if count < 1: raise ValueError
    except:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0!")

    data = await state.get_data()
    complaint_text = f"""
    –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: {data['username']}
    üîñ ID: {data['telegram_id']}
    üìå –ü—Ä–∏—á–∏–Ω–∞: {data['reason']}
    """

    success = 0
    errors = []
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º
    for _ in range(count):
        for email, password in senders.items():
            for receiver in receivers:
                try:
                    result = send_gmail(receiver, email, password, "–ñ–∞–ª–æ–±–∞", complaint_text)
                    if "–£—Å–ø–µ—à–Ω–æ" in result: success += 1
                except Exception as e:
                    errors.append(str(e))
                if success >= count: break
            if success >= count: break
        if success >= count: break

    await message.answer(f"""
    ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∂–∞–ª–æ–±: {success}
    ‚ùå –û—à–∏–±–æ–∫: {len(errors)}
    """)
    await state.finish()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Gmail
def send_gmail(receiver, sender_email, sender_password, subject, body):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.create_connection(("smtp.gmail.com", 587), timeout=5)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å—å–º–∞
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = receiver
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, receiver, msg.as_string())
        return "–£—Å–ø–µ—à–Ω–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)